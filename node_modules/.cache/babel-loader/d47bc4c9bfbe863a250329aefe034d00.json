{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      address,\n      token\n    } = _ref;\n\n    this._handleResponse = res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка ${res.status}`);\n    };\n\n    this._address = address;\n    this._token = token;\n  }\n\n  getUserData() {\n    return fetch(`${this._address}/users/me`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._handleResponse);\n  }\n\n  getCards() {\n    return fetch(`${this._address}/cards`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._handleResponse);\n  }\n\n  profileEdit(name, about) {\n    return fetch(`${this._address}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(this._handleResponse);\n  }\n\n  addCard(name, link) {\n    return fetch(`${this._address}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(this._handleResponse);\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._address}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    }).then(this._handleResponse);\n  }\n\n  likeCard(cardId) {\n    return fetch(`${this._address}/cards/likes/${cardId}`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    }).then(this._handleResponse);\n  }\n\n  dislikeCard(cardId) {\n    return fetch(`${this._address}/cards/likes/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    }).then(this._handleResponse);\n  }\n\n  editUserAvatar(url) {\n    return fetch(`${this._address}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: url\n      })\n    }).then(this._handleResponse);\n  }\n\n}\n\nconst api = new Api({\n  address: 'https://mesto.nomoreparties.co/v1/cohort-35',\n  token: '7b2f9279-45b3-4b51-8e23-d855b4f2907e'\n});\nexport default api;","map":{"version":3,"sources":["/Users/diananurgaleeva/Desktop/mesto-react-steps/mesto-react/src/utils/api.js"],"names":["Api","constructor","address","token","_handleResponse","res","ok","json","Promise","reject","status","_address","_token","getUserData","fetch","headers","authorization","then","getCards","profileEdit","name","about","method","body","JSON","stringify","addCard","link","deleteCard","cardId","likeCard","dislikeCard","editUserAvatar","url","avatar","api"],"mappings":"AAAA,MAAMA,GAAN,CAAS;AACLC,EAAAA,WAAW,OAAkB;AAAA,QAAjB;AAACC,MAAAA,OAAD;AAAUC,MAAAA;AAAV,KAAiB;;AAAA,SAK7BC,eAL6B,GAKVC,GAAD,IAAS;AACvB,UAAIA,GAAG,CAACC,EAAR,EAAY;AACR,eAAOD,GAAG,CAACE,IAAJ,EAAP;AACH;;AACD,aAAOC,OAAO,CAACC,MAAR,CAAgB,UAASJ,GAAG,CAACK,MAAO,EAApC,CAAP;AACH,KAV4B;;AACzB,SAAKC,QAAL,GAAgBT,OAAhB;AACA,SAAKU,MAAL,GAAcT,KAAd;AACH;;AASDU,EAAAA,WAAW,GAAG;AACV,WAAOC,KAAK,CAAE,GAAE,KAAKH,QAAS,WAAlB,EAA6B;AACrCI,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,KAAKJ;AADf;AAD4B,KAA7B,CAAL,CAIJK,IAJI,CAIC,KAAKb,eAJN,CAAP;AAKH;;AAEDc,EAAAA,QAAQ,GAAG;AACP,WAAOJ,KAAK,CAAE,GAAE,KAAKH,QAAS,QAAlB,EAA2B;AACnCI,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,KAAKJ;AADf;AAD0B,KAA3B,CAAL,CAIJK,IAJI,CAIC,KAAKb,eAJN,CAAP;AAKH;;AAEDe,EAAAA,WAAW,CAACC,IAAD,EAAOC,KAAP,EAAa;AACpB,WAAOP,KAAK,CAAE,GAAE,KAAKH,QAAS,WAAlB,EAA8B;AACtCW,MAAAA,MAAM,EAAC,OAD+B;AAEtCP,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,KAAKJ,MADf;AAEL,wBAAgB;AAFX,OAF6B;AAMtCW,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBL,QAAAA,IAAI,EAAEA,IADW;AAEjBC,QAAAA,KAAK,EAAEA;AAFU,OAAf;AANgC,KAA9B,CAAL,CAUJJ,IAVI,CAUC,KAAKb,eAVN,CAAP;AAWH;;AAEDsB,EAAAA,OAAO,CAACN,IAAD,EAAOO,IAAP,EAAY;AACf,WAAOb,KAAK,CAAE,GAAE,KAAKH,QAAS,QAAlB,EAA0B;AAClCW,MAAAA,MAAM,EAAC,MAD2B;AAElCP,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,KAAKJ,MADf;AAEL,wBAAgB;AAFX,OAFyB;AAMlCW,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBL,QAAAA,IAAI,EAAEA,IADW;AAEjBO,QAAAA,IAAI,EAAEA;AAFW,OAAf;AAN4B,KAA1B,CAAL,CAUJV,IAVI,CAUC,KAAKb,eAVN,CAAP;AAWH;;AAEDwB,EAAAA,UAAU,CAACC,MAAD,EAAS;AACf,WAAOf,KAAK,CAAG,GAAE,KAAKH,QAAS,UAASkB,MAAO,EAAnC,EAAqC;AAC7CP,MAAAA,MAAM,EAAC,QADsC;AAE7CP,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,KAAKJ,MADf;AAEL,wBAAgB;AAFX;AAFoC,KAArC,CAAL,CAMJK,IANI,CAMC,KAAKb,eANN,CAAP;AAQH;;AAED0B,EAAAA,QAAQ,CAACD,MAAD,EAAS;AACb,WAAOf,KAAK,CAAG,GAAE,KAAKH,QAAS,gBAAekB,MAAO,EAAzC,EAA2C;AACvDP,MAAAA,MAAM,EAAC,KADgD;AAEvDP,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,KAAKJ,MADf;AAEL,wBAAgB;AAFX;AAF8C,KAA3C,CAAL,CAMRK,IANQ,CAMH,KAAKb,eANF,CAAP;AAOH;;AACD2B,EAAAA,WAAW,CAACF,MAAD,EAAS;AAChB,WAAOf,KAAK,CAAG,GAAE,KAAKH,QAAS,gBAAekB,MAAO,EAAzC,EAA2C;AACvDP,MAAAA,MAAM,EAAC,QADgD;AAEvDP,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,KAAKJ,MADf;AAEL,wBAAgB;AAFX;AAF8C,KAA3C,CAAL,CAMRK,IANQ,CAMH,KAAKb,eANF,CAAP;AAOH;;AAED4B,EAAAA,cAAc,CAACC,GAAD,EAAK;AACf,WAAOnB,KAAK,CAAE,GAAE,KAAKH,QAAS,kBAAlB,EAAoC;AAC5CW,MAAAA,MAAM,EAAC,OADqC;AAE5CP,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,KAAKJ,MADf;AAEL,wBAAgB;AAFX,OAFmC;AAM5CW,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBS,QAAAA,MAAM,EAAED;AADS,OAAf;AANsC,KAApC,CAAL,CASJhB,IATI,CASC,KAAKb,eATN,CAAP;AAUH;;AAlGI;;AAqGT,MAAM+B,GAAG,GAAG,IAAInC,GAAJ,CAAQ;AAChBE,EAAAA,OAAO,EAAE,6CADO;AAEhBC,EAAAA,KAAK,EAAE;AAFS,CAAR,CAAZ;AAKA,eAAegC,GAAf","sourcesContent":["class Api{\n    constructor({address, token}){\n        this._address = address;\n        this._token = token;\n    }\n    \n    _handleResponse = (res) => {\n        if (res.ok) {\n            return res.json()\n        }\n        return Promise.reject(`Ошибка ${res.status}`)\n    }\n\n    getUserData() {\n        return fetch(`${this._address}/users/me`,{\n            headers: {\n                authorization: this._token\n            }\n        }).then(this._handleResponse)\n    }\n\n    getCards() {\n        return fetch(`${this._address}/cards`, {\n            headers: {\n                authorization: this._token\n            }\n        }).then(this._handleResponse)\n    }\n\n    profileEdit(name, about){\n        return fetch(`${this._address}/users/me`, {\n            method:'PATCH',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: name,\n                about: about\n            })\n        }).then(this._handleResponse)\n    }\n\n    addCard(name, link){\n        return fetch(`${this._address}/cards`,{\n            method:'POST',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: name,\n                link: link\n            })\n        }).then(this._handleResponse)\n    }\n\n    deleteCard(cardId) {\n        return fetch (`${this._address}/cards/${cardId}`,{\n            method:'DELETE',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            }\n        }).then(this._handleResponse)\n    \n    }\n\n    likeCard(cardId) { \n        return fetch (`${this._address}/cards/likes/${cardId}`,{\n        method:'PUT',\n        headers: {\n            authorization: this._token,\n            'Content-Type': 'application/json'\n        }\n    }).then(this._handleResponse)\n    }\n    dislikeCard(cardId) { \n        return fetch (`${this._address}/cards/likes/${cardId}`,{\n        method:'DELETE',\n        headers: {\n            authorization: this._token,\n            'Content-Type': 'application/json'\n        }\n    }).then(this._handleResponse)\n    }\n\n    editUserAvatar(url){\n        return fetch(`${this._address}/users/me/avatar`,{\n            method:'PATCH',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                avatar: url\n            })\n        }).then(this._handleResponse)\n    }\n\n}\nconst api = new Api({\n    address: 'https://mesto.nomoreparties.co/v1/cohort-35',\n    token: '7b2f9279-45b3-4b51-8e23-d855b4f2907e'\n  }); \n\nexport default api;"]},"metadata":{},"sourceType":"module"}